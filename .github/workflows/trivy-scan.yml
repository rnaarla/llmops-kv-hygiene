name: Trivy Scan

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # weekly Sunday 00:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # needed for SARIF upload

jobs:
  scan:
    name: Trivy ${{ matrix.target }} scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [image, fs]
    env:
      IMAGE_REPO: ghcr.io/${{ github.repository }}
      SHORT_SHA: ${{ github.sha.substr(0,7) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Derive image tag
        id: meta
        run: |
          echo "tag=cpu-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "image=${IMAGE_REPO}:cpu-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.1

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.run-id }}
          restore-keys: |
            trivy-db-${{ runner.os }}

      # Optionally pull image (in case build workflow already pushed it); ignore errors if not present.
      - name: Attempt docker pull (best-effort)
        if: matrix.target == 'image'
        run: |
          docker pull "${{ steps.meta.outputs.image }}" || echo "Image not yet published; scan will likely fail unless image exists."

      - name: Run Trivy (table report)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: ${{ matrix.target }}
          image-ref: ${{ matrix.target == 'image' && steps.meta.outputs.image || '' }}
          format: 'table'
          scanners: 'vuln,secret'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '0'  # never fail pipeline on vulnerability presence; gating handled elsewhere
          output: trivy-${{ matrix.target }}-results.txt
          timeout: '10m'

      - name: Upload table results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ matrix.target }}-results
          path: trivy-${{ matrix.target }}-results.txt

      - name: Run Trivy (SARIF report)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: ${{ matrix.target }}
          image-ref: ${{ matrix.target == 'image' && steps.meta.outputs.image || '' }}
          format: 'sarif'
          scanners: 'vuln'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '0'
          output: trivy-${{ matrix.target }}-results.sarif
          timeout: '10m'

      - name: Upload SARIF to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.target }}-results.sarif

      # Uncomment the gating step below to enforce failing the pipeline when new critical/high vulns appear.
      # - name: Fail on critical/high (future policy)
      #   if: always() && matrix.target == 'image'
      #   run: |
      #     if grep -q 'CRITICAL' trivy-image-results.txt || grep -q 'HIGH' trivy-image-results.txt; then
      #       echo "Critical/High vulnerabilities detected. (Policy gating currently disabled)";
      #       exit 1;
      #     fi

  notify:
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Download scan artifacts
        uses: actions/download-artifact@v4
        with:
            path: trivy-reports

      - name: Send Slack Notification
        if: always() && secrets.SLACK_WEBHOOK != ''
        run: |
          echo "Sending Slack notification..."
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"Trivy scan completed. Reports: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" \
            ${{ secrets.SLACK_WEBHOOK }} || echo "Slack notification failed or not configured"

      - name: Send Email Notification
        if: always() && secrets.MAIL_USERNAME != '' && secrets.MAIL_PASSWORD != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Trivy Scan Completed - ${{ github.repository }}"
          body: "Trivy scan finished. Reports: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          to: "security-team@example.com"
          from: "ci-bot@example.com"
